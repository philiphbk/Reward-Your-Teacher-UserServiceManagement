// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RYTUserManagementService.Domain;

#nullable disable

namespace RYTUserManagementService.Domain.Migrations
{
    [DbContext(typeof(UserManagementDbContext))]
    partial class UserManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "664064fb-e437-4e09-8429-f8a6c3a485a7",
                            ConcurrencyStamp = "5e20ea34-cf27-4c1c-9e24-85119bcb6fa6",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "4eecd988-7ca5-480d-b949-0ba42a442d13",
                            ConcurrencyStamp = "f321c11c-a07e-410c-9918-90a604c46bc7",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c041d0fd-0651-4696-84b5-f454b1fd9c91",
                            ConcurrencyStamp = "4f31c9ff-4e8c-4862-aba6-a899013c51a8",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RYTUserManagementService.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "a7dd2ab0-289c-11ed-a261-0242ac120002",
                            City = "Benin",
                            Country = "Nigeria",
                            CreatedAt = new DateTime(2022, 8, 30, 20, 55, 57, 847, DateTimeKind.Local).AddTicks(5798),
                            CreatedBy = "Dami",
                            Latitude = 4.5646573999999998,
                            Longitude = 9.0,
                            State = "Edo",
                            StreetAddress = "Okuoromi Community",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Dami"
                        },
                        new
                        {
                            Id = "b01430ca-289c-11ed-a261-0242ac120002",
                            City = "Lagos",
                            Country = "Nigeria",
                            CreatedAt = new DateTime(2022, 8, 30, 20, 55, 57, 847, DateTimeKind.Local).AddTicks(6092),
                            CreatedBy = "Dami",
                            Latitude = 4.5646764657399999,
                            Longitude = 9.5600645699999998,
                            State = "Lagos",
                            StreetAddress = "Lagos Community",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Dami"
                        });
                });

            modelBuilder.Entity("RYTUserManagementService.Models.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RYTUserManagementService.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "11f09734-289d-11ed-a261-0242ac120002",
                            AddressId = "a7dd2ab0-289c-11ed-a261-0242ac120002",
                            CreatedAt = new DateTime(2022, 8, 30, 20, 55, 57, 847, DateTimeKind.Local).AddTicks(5655),
                            CreatedBy = "Dami",
                            Logo = "https://unsplash.com/photos/mPnkjZ_9a8Q",
                            SchoolName = "Decagon Institute Edo",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedBy = "Dami"
                        },
                        new
                        {
                            Id = "21addd9e-289d-11ed-a261-0242ac120002",
                            AddressId = "b01430ca-289c-11ed-a261-0242ac120002",
                            CreatedAt = new DateTime(2022, 8, 30, 20, 55, 57, 847, DateTimeKind.Local).AddTicks(5662),
                            CreatedBy = "Dami",
                            Logo = "https://unsplash.com/photos/mPnkjZ_9a8Q",
                            SchoolName = "Decagon Institute Lagos",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedBy = "Dami"
                        });
                });

            modelBuilder.Entity("RYTUserManagementService.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<int>("Title")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "0e3f2aac-8c53-4ffb-aa41-aac9309cad0f",
                            About = "I am a student",
                            AccessFailedCount = 0,
                            Address = "Okuoromi Community,Benin, Edo, Nigeria, 9.0000000, 4.5646574",
                            ConcurrencyStamp = "75aa5c65-16c2-412d-8c28-7a26d1847aa7",
                            CreatedAt = new DateTime(2022, 8, 30, 20, 55, 57, 847, DateTimeKind.Local).AddTicks(5349),
                            CreatedBy = "Dami",
                            EmailConfirmed = false,
                            FullName = "Jegede Moses",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileUrl = "https://unsplash.com/photos/mPnkjZ_9a8Q",
                            SecurityStamp = "58b9d0f7-4436-4a5d-8d63-8493c56df3a6",
                            Title = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Dami"
                        },
                        new
                        {
                            Id = "6a02dd68-b2dc-4dd3-b247-4dfb43e44aaa",
                            About = "I am a student",
                            AccessFailedCount = 0,
                            Address = "Okuoromi Community,Benin, Edo, Nigeria, 9.0000000, 4.5646574",
                            ConcurrencyStamp = "802894ce-b798-48fb-89fc-35c512246d87",
                            CreatedAt = new DateTime(2022, 8, 30, 20, 55, 57, 847, DateTimeKind.Local).AddTicks(5375),
                            CreatedBy = "Dami",
                            EmailConfirmed = false,
                            FullName = "Jegede Esther",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileUrl = "https://unsplash.com/photos/mPnkjZ_9a8Q",
                            SecurityStamp = "8241ccdf-0677-4f85-b55b-2dbca6e7af2e",
                            Title = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Dami"
                        });
                });

            modelBuilder.Entity("RYTUserManagementService.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EndYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Title")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "7e3e8d5d-f8f4-4eaf-b5e4-8343c536103b",
                            About = "I am A Teacher",
                            AccessFailedCount = 0,
                            Address = "Okuoromi Community,Benin, Edo, Nigeria, 9.0000000, 4.5646574",
                            ConcurrencyStamp = "451e7369-af09-49e6-9b2d-cfa4a43fc2ef",
                            CreatedAt = new DateTime(2022, 8, 30, 20, 55, 57, 847, DateTimeKind.Local).AddTicks(4969),
                            CreatedBy = "Dami",
                            EmailConfirmed = false,
                            FullName = "Ayooluwa Moses",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Position = "HeadSA",
                            ProfileUrl = "https://unsplash.com/photos/mPnkjZ_9a8Q",
                            SecurityStamp = "89957c93-7558-4e89-8244-3316f0ff6d5d",
                            StartYear = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = 3,
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Dami"
                        },
                        new
                        {
                            Id = "b9c635ff-e89c-43dd-8cc4-517d66b2052b",
                            About = "I am A Teacher",
                            AccessFailedCount = 0,
                            Address = "Okuoromi Community,Benin, Edo, Nigeria, 9.0000000, 4.5646574",
                            ConcurrencyStamp = "8fbb6076-702b-4b28-9132-30fe3e37310d",
                            CreatedAt = new DateTime(2022, 8, 30, 20, 55, 57, 847, DateTimeKind.Local).AddTicks(5012),
                            CreatedBy = "Dami",
                            EmailConfirmed = false,
                            FullName = "Tijani Moses",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Position = "HeadSA",
                            ProfileUrl = "https://unsplash.com/photos/mPnkjZ_9a8Q",
                            SecurityStamp = "90f55c68-571d-42ac-aafa-61e2ec4702e8",
                            StartYear = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = 4,
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Dami"
                        });
                });

            modelBuilder.Entity("SchoolStudent", b =>
                {
                    b.Property<string>("SchoolId")
                        .HasColumnType("text");

                    b.Property<string>("StudentsId")
                        .HasColumnType("text");

                    b.HasKey("SchoolId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("SchoolStudent");
                });

            modelBuilder.Entity("SchoolTeacher", b =>
                {
                    b.Property<string>("SchoolId")
                        .HasColumnType("text");

                    b.Property<string>("TeachersId")
                        .HasColumnType("text");

                    b.HasKey("SchoolId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("SchoolTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RYTUserManagementService.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RYTUserManagementService.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RYTUserManagementService.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RYTUserManagementService.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RYTUserManagementService.Models.School", b =>
                {
                    b.HasOne("RYTUserManagementService.Models.Address", "Address")
                        .WithMany("Schools")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("RYTUserManagementService.Models.Student", b =>
                {
                    b.HasOne("RYTUserManagementService.Models.Student", null)
                        .WithMany("Students")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SchoolStudent", b =>
                {
                    b.HasOne("RYTUserManagementService.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RYTUserManagementService.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolTeacher", b =>
                {
                    b.HasOne("RYTUserManagementService.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RYTUserManagementService.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RYTUserManagementService.Models.Address", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("RYTUserManagementService.Models.Student", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
